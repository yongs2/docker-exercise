use AGENT_DB;

DELIMITER //
DROP FUNCTION IF EXISTS BITNOT;

CREATE FUNCTION BITNOT (x INT) RETURNS INT
BEGIN
  RETURN (-1 - x);
END //
DELIMITER ;



DELIMITER //
DROP FUNCTION IF EXISTS BITOR;

CREATE FUNCTION BITOR (x INT, y INT) RETURNS INT 
BEGIN
  RETURN (x + y - (x & y) );
END //
DELIMITER ;



DELIMITER //
DROP FUNCTION IF EXISTS BITXOR ;

CREATE FUNCTION BITXOR (x INT, y INT) RETURNS INT
BEGIN
  RETURN ((x | y) - (x & y));
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS GETNODEGRPINDEX ;

CREATE FUNCTION GETNODEGRPINDEX (no INT) RETURNS INT
BEGIN
  RETURN CAST(no >> 12 AS INT)-1;
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS GETNODEGRPTYPE ;

CREATE FUNCTION  GETNODEGRPTYPE (no INT) RETURNS INT
BEGIN
  RETURN (no & 4095);
END //
DELIMITER ;

DELIMITER //
DROP FUNCTION IF EXISTS GETNODEINDEX ;

CREATE FUNCTION GETNODEINDEX (no INT) RETURNS INT
BEGIN
  RETURN CAST(no >> 8 AS INT) - 1;
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS GETNODETYPE ;

CREATE FUNCTION GETNODETYPE (no INT) RETURNS INT
BEGIN
  RETURN (no & 255);
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS MKNODE ;

CREATE FUNCTION MKNODE (idx INT, type INT) RETURNS INT
BEGIN
  DECLARE result INT DEFAULT 0;
  SELECT CAST( CAST(idx+1 << 8 AS INT) ^ CAST(type & 255 AS INT) AS INT) INTO result ;
  RETURN result ;
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS MKNODEGRP ;

CREATE FUNCTION MKNODEGRP (idx INT, type INT) RETURNS INT
BEGIN
  DECLARE result INT DEFAULT 0;
  SELECT CAST( CAST(idx+1 << 12 AS INT) ^ CAST(type & 4095 AS INT) AS INT) INTO result ;
  RETURN result ;
END //
DELIMITER ;



DELIMITER //
DROP FUNCTION IF EXISTS LSHIFT ;

CREATE FUNCTION LSHIFT (x INT, y INT) RETURNS INT
BEGIN
   RETURN CAST(x << y AS INT);
END //
DELIMITER ;


DELIMITER //
DROP FUNCTION IF EXISTS RSHIFT ;

CREATE FUNCTION RSHIFT (x INT, y INT) RETURNS INT
BEGIN
  RETURN CAST(x >> y AS INT);
END //
DELIMITER ;



